type token =
  | ASSIGN
  | OR
  | AND
  | NOT
  | NEG
  | LT
  | LEQ
  | EQ
  | NEQ
  | GEQ
  | GT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULO
  | EXPONENTIAL
  | COMPLEMENT
  | TRANSCRIBE
  | TRANSLATE
  | TRANSLATETWO
  | BEGIN
  | END
  | IF
  | ELSEIF
  | ELSE
  | THEN
  | FOR
  | WHILE
  | CONTINUE
  | BREAK
  | NUC
  | INT
  | DOUBLE
  | AA
  | BOOL
  | CHAR
  | VOID
  | STRING
  | CODON
  | SEQUENCE
  | TRUE
  | FALSE
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | COLON
  | INCLUDE
  | RETURN
  | EOF
  | LOCAL
  | VARIABLE
  | INT_LIT of (int)
  | ID of (string)
  | SEQUENCE_LIT of (string)
  | DOUBLE_LIT of (float)
  | STRING_LIT of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 68 "parser.ml"
let yytransl_const = [|
  257 (* ASSIGN *);
  258 (* OR *);
  259 (* AND *);
  260 (* NOT *);
  261 (* NEG *);
  262 (* LT *);
  263 (* LEQ *);
  264 (* EQ *);
  265 (* NEQ *);
  266 (* GEQ *);
  267 (* GT *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MODULO *);
  273 (* EXPONENTIAL *);
  274 (* COMPLEMENT *);
  275 (* TRANSCRIBE *);
  276 (* TRANSLATE *);
  277 (* TRANSLATETWO *);
  278 (* BEGIN *);
  279 (* END *);
  280 (* IF *);
  281 (* ELSEIF *);
  282 (* ELSE *);
  283 (* THEN *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* CONTINUE *);
  287 (* BREAK *);
  288 (* NUC *);
  289 (* INT *);
  290 (* DOUBLE *);
  291 (* AA *);
  292 (* BOOL *);
  293 (* CHAR *);
  294 (* VOID *);
  295 (* STRING *);
  296 (* CODON *);
  297 (* SEQUENCE *);
  298 (* TRUE *);
  299 (* FALSE *);
  300 (* LPAREN *);
  301 (* RPAREN *);
  302 (* LBRACK *);
  303 (* RBRACK *);
  304 (* SEMI *);
  305 (* COMMA *);
  306 (* COLON *);
  307 (* INCLUDE *);
  308 (* RETURN *);
    0 (* EOF *);
  309 (* LOCAL *);
  310 (* VARIABLE *);
    0|]

let yytransl_block = [|
  311 (* INT_LIT *);
  312 (* ID *);
  313 (* SEQUENCE_LIT *);
  314 (* DOUBLE_LIT *);
  315 (* STRING_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\005\000\004\000\008\000\008\000\
\010\000\010\000\011\000\011\000\009\000\009\000\003\000\003\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\013\000\013\000\012\000\012\000\012\000\012\000\012\000\
\012\000\015\000\015\000\015\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\014\000\014\000\016\000\016\000\017\000\017\000\
\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\005\000\007\000\000\000\001\000\
\002\000\004\000\000\000\002\000\000\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000\002\000\002\000\003\000\003\000\009\000\005\000\
\006\000\000\000\005\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\004\000\000\000\001\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\002\000\000\000\073\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\023\000\017\000\021\000\022\000\018\000\
\020\000\019\000\025\000\024\000\037\000\038\000\000\000\000\000\
\001\000\040\000\000\000\042\000\041\000\043\000\003\000\004\000\
\015\000\000\000\000\000\016\000\059\000\058\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\062\000\063\000\028\000\030\000\027\000\013\000\000\000\013\000\
\065\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\000\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\014\000\000\000\000\000\000\000\032\000\000\000\005\000\
\009\000\013\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\000\000\013\000\013\000\006\000\010\000\000\000\000\000\
\035\000\031\000"

let yydgoto = "\002\000\
\003\000\004\000\106\000\032\000\033\000\107\000\035\000\102\000\
\095\000\103\000\000\000\036\000\040\000\043\000\108\000\077\000\
\078\000"

let yysindex = "\005\000\
\000\000\000\000\000\000\001\000\023\255\023\255\023\255\000\000\
\023\255\023\255\023\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\255\023\255\
\000\000\000\000\018\255\000\000\000\000\000\000\000\000\000\000\
\000\000\216\254\240\001\000\000\000\000\000\000\000\000\142\000\
\047\002\114\002\225\254\070\002\243\255\226\254\023\255\023\255\
\019\255\023\255\023\255\023\255\023\255\023\255\023\255\023\255\
\023\255\023\255\023\255\023\255\023\255\023\255\023\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\255\000\000\
\000\000\000\000\114\002\114\002\234\254\231\254\023\255\140\000\
\133\002\218\001\143\002\143\002\143\002\143\002\143\002\143\002\
\194\001\194\001\250\254\250\254\250\254\000\000\088\255\004\002\
\135\255\000\000\023\255\027\002\235\254\245\254\244\254\023\255\
\000\000\000\000\238\254\016\255\023\255\000\000\114\002\000\000\
\000\000\000\000\140\000\092\002\095\000\039\255\000\000\020\255\
\182\255\008\255\000\000\000\000\000\000\000\000\088\255\048\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\255\
\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\241\254\000\000\000\000\000\000\000\000\000\000\026\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\239\254\236\254\000\000\027\255\000\000\028\255\
\106\255\041\255\091\001\114\001\124\001\147\001\173\001\196\001\
\042\001\065\001\223\000\249\000\016\001\000\000\051\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\038\255\000\000\
\000\000\000\000\000\000\000\000\058\255\000\000\237\254\000\000\
\000\000\000\000\000\000\000\000\065\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\255\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\087\000\000\000\000\000\252\255\254\255\000\000\
\226\255\000\000\000\000\055\000\000\000\234\255\225\255\000\000\
\000\000"

let yytablesize = 932
let yytable = "\034\000\
\025\000\046\000\037\000\038\000\039\000\001\000\041\000\042\000\
\044\000\064\000\063\000\068\000\064\000\065\000\066\000\049\000\
\071\000\074\000\047\000\079\000\045\000\042\000\098\000\099\000\
\071\000\072\000\005\000\064\000\071\000\072\000\064\000\064\000\
\068\000\114\000\113\000\006\000\115\000\118\000\119\000\079\000\
\007\000\097\000\050\000\050\000\075\000\076\000\124\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\048\000\080\000\126\000\
\021\000\022\000\023\000\050\000\096\000\067\000\069\000\070\000\
\007\000\034\000\117\000\101\000\100\000\026\000\027\000\028\000\
\029\000\030\000\008\000\121\000\067\000\050\000\120\000\036\000\
\050\000\050\000\031\000\005\000\127\000\128\000\069\000\129\000\
\111\000\000\000\000\000\000\000\006\000\116\000\000\000\000\000\
\000\000\007\000\042\000\051\000\000\000\008\000\122\000\009\000\
\104\000\105\000\000\000\010\000\011\000\000\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\000\000\
\020\000\021\000\022\000\023\000\051\000\000\000\000\000\000\000\
\000\000\000\000\005\000\024\000\000\000\000\000\026\000\027\000\
\028\000\029\000\030\000\006\000\000\000\000\000\051\000\000\000\
\007\000\051\000\051\000\000\000\008\000\110\000\009\000\000\000\
\000\000\000\000\010\000\011\000\000\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\000\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\024\000\000\000\000\000\026\000\027\000\028\000\
\029\000\030\000\006\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\125\000\009\000\000\000\000\000\
\000\000\010\000\011\000\000\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\000\000\020\000\021\000\
\022\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\026\000\027\000\028\000\029\000\
\030\000\000\000\000\000\000\000\050\000\051\000\000\000\000\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\005\000\064\000\065\000\066\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\008\000\000\000\
\009\000\000\000\000\000\000\000\010\000\011\000\000\000\073\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\000\000\020\000\021\000\022\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\024\000\000\000\000\000\026\000\
\027\000\028\000\029\000\030\000\006\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\008\000\130\000\009\000\
\000\000\000\000\000\000\010\000\011\000\000\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\000\000\
\020\000\021\000\022\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\024\000\000\000\000\000\026\000\027\000\
\028\000\029\000\030\000\006\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\008\000\000\000\009\000\000\000\
\000\000\000\000\010\000\011\000\000\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\000\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\024\000\000\000\000\000\026\000\027\000\028\000\
\029\000\030\000\006\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\068\000\009\000\000\000\000\000\
\000\000\010\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\000\000\020\000\000\000\000\000\021\000\
\022\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\026\000\027\000\028\000\029\000\
\030\000\039\000\039\000\000\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\000\000\039\000\039\000\039\000\000\000\000\000\000\000\
\046\000\046\000\039\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\000\000\039\000\
\039\000\046\000\047\000\047\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\000\000\046\000\000\000\000\000\046\000\046\000\
\000\000\048\000\048\000\047\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\047\000\047\000\048\000\044\000\044\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\000\000\048\000\
\048\000\000\000\045\000\045\000\044\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
\000\000\044\000\044\000\045\000\054\000\054\000\000\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
\045\000\045\000\000\000\055\000\055\000\054\000\000\000\055\000\
\055\000\055\000\055\000\055\000\055\000\052\000\052\000\000\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\054\000\
\000\000\000\000\054\000\054\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\000\053\000\052\000\000\000\
\053\000\053\000\053\000\053\000\053\000\053\000\055\000\000\000\
\000\000\055\000\055\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\000\000\052\000\052\000\053\000\057\000\057\000\
\000\000\000\000\057\000\057\000\057\000\057\000\057\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\
\000\000\000\000\053\000\053\000\000\000\056\000\056\000\057\000\
\000\000\056\000\056\000\056\000\056\000\056\000\056\000\060\000\
\061\000\062\000\063\000\000\000\064\000\065\000\066\000\000\000\
\000\000\057\000\000\000\000\000\057\000\057\000\056\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\000\000\064\000\065\000\066\000\000\000\
\056\000\050\000\051\000\056\000\056\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\000\000\064\000\065\000\066\000\050\000\051\000\000\000\
\000\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\000\000\064\000\065\000\
\066\000\000\000\000\000\000\000\050\000\051\000\000\000\067\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\000\000\064\000\065\000\066\000\
\050\000\051\000\000\000\109\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\000\000\064\000\065\000\066\000\000\000\000\000\000\000\050\000\
\051\000\070\000\112\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\000\000\
\064\000\065\000\066\000\000\000\000\000\050\000\051\000\000\000\
\072\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\000\000\064\000\065\000\
\066\000\000\000\000\000\050\000\051\000\000\000\123\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\000\000\064\000\065\000\066\000\051\000\
\000\000\000\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\000\000\064\000\
\065\000\066\000\058\000\059\000\060\000\061\000\062\000\063\000\
\000\000\064\000\065\000\066\000"

let yycheck = "\004\000\
\000\000\024\000\005\000\006\000\007\000\001\000\009\000\010\000\
\011\000\027\001\017\001\027\001\019\001\020\001\021\001\056\001\
\048\001\048\001\001\001\001\001\023\000\024\000\045\001\049\001\
\045\001\045\001\004\001\045\001\049\001\049\001\048\001\049\001\
\048\001\045\001\056\001\013\001\049\001\056\001\023\001\001\001\
\018\001\072\000\002\001\003\001\047\000\048\000\027\001\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\044\001\044\001\056\001\
\042\001\043\001\044\001\027\001\071\000\048\001\045\001\045\001\
\045\001\023\001\105\000\080\000\079\000\055\001\056\001\057\001\
\058\001\059\001\045\001\114\000\027\001\045\001\109\000\023\001\
\048\001\049\001\004\000\004\001\123\000\124\000\040\000\127\000\
\099\000\255\255\255\255\255\255\013\001\104\000\255\255\255\255\
\255\255\018\001\109\000\002\001\255\255\022\001\115\000\024\001\
\025\001\026\001\255\255\028\001\029\001\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\255\255\
\041\001\042\001\043\001\044\001\027\001\255\255\255\255\255\255\
\255\255\255\255\004\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\013\001\255\255\255\255\045\001\255\255\
\018\001\048\001\049\001\255\255\022\001\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\004\001\052\001\255\255\255\255\055\001\056\001\057\001\
\058\001\059\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\041\001\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\255\255\255\255\255\255\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\004\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\045\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\004\001\052\001\255\255\255\255\055\001\
\056\001\057\001\058\001\059\001\013\001\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\255\255\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\004\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\013\001\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\022\001\255\255\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\004\001\052\001\255\255\255\255\055\001\056\001\057\001\
\058\001\059\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\255\255\255\255\
\255\255\028\001\029\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\255\255\041\001\255\255\255\255\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\255\255\255\255\255\255\
\002\001\003\001\027\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\045\001\255\255\255\255\048\001\
\049\001\027\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\045\001\255\255\255\255\048\001\049\001\
\255\255\002\001\003\001\027\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\255\255\
\048\001\049\001\027\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\045\001\255\255\255\255\048\001\
\049\001\255\255\002\001\003\001\027\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\255\255\
\255\255\048\001\049\001\027\001\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\255\255\
\048\001\049\001\255\255\002\001\003\001\027\001\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\002\001\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\045\001\
\255\255\255\255\048\001\049\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\003\001\027\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\045\001\255\255\
\255\255\048\001\049\001\255\255\255\255\255\255\255\255\255\255\
\045\001\255\255\255\255\048\001\049\001\027\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\255\255\048\001\049\001\255\255\002\001\003\001\027\001\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\255\255\
\255\255\045\001\255\255\255\255\048\001\049\001\027\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\255\255\
\045\001\002\001\003\001\048\001\049\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\002\001\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\255\255\255\255\255\255\002\001\003\001\255\255\048\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\002\001\003\001\255\255\048\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\255\255\255\255\255\255\002\001\
\003\001\027\001\048\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\021\001\255\255\255\255\002\001\003\001\255\255\
\027\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\255\255\255\255\002\001\003\001\255\255\027\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001"

let yynames_const = "\
  ASSIGN\000\
  OR\000\
  AND\000\
  NOT\000\
  NEG\000\
  LT\000\
  LEQ\000\
  EQ\000\
  NEQ\000\
  GEQ\000\
  GT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULO\000\
  EXPONENTIAL\000\
  COMPLEMENT\000\
  TRANSCRIBE\000\
  TRANSLATE\000\
  TRANSLATETWO\000\
  BEGIN\000\
  END\000\
  IF\000\
  ELSEIF\000\
  ELSE\000\
  THEN\000\
  FOR\000\
  WHILE\000\
  CONTINUE\000\
  BREAK\000\
  NUC\000\
  INT\000\
  DOUBLE\000\
  AA\000\
  BOOL\000\
  CHAR\000\
  VOID\000\
  STRING\000\
  CODON\000\
  SEQUENCE\000\
  TRUE\000\
  FALSE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  SEMI\000\
  COMMA\000\
  COLON\000\
  INCLUDE\000\
  RETURN\000\
  EOF\000\
  LOCAL\000\
  VARIABLE\000\
  "

let yynames_block = "\
  INT_LIT\000\
  ID\000\
  SEQUENCE_LIT\000\
  DOUBLE_LIT\000\
  STRING_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 46 "parser.mly"
                   (_1)
# 538 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "parser.mly"
        ({variables = []; stmts = []; body = []; funcs = [];})
# 544 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'collection) in
    Obj.repr(
# 49 "parser.mly"
                       ({ variables = fst _2 @ _1.variables; stmts = snd _2 @ _1.stmts; body= _2 :: _1.body; funcs = _1.funcs;})
# 552 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 51 "parser.mly"
                      ({ variables = _1.variables; stmts = _1.stmts; body=_1.body; funcs = _2 :: _1.funcs; })
# 560 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                            ( _1, _2, _4 )
# 569 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 59 "parser.mly"
    ({ typ = _1; fname = _2; formals = _4; variables = _6.variables; stmts = _6.stmts; body = _6.body;})
# 579 "parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                  ([])
# 585 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 63 "parser.mly"
                    ( List.rev _1 )
# 592 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
            ([(_1, _2)])
# 600 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
                              ( (_3, _4) :: _1 )
# 609 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                    ([])
# 615 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 71 "parser.mly"
                        ( _2 :: _1 )
# 623 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
    ({variables = []; stmts = [];body=[];funcs=[];})
# 629 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'collection) in
    Obj.repr(
# 75 "parser.mly"
                         ({ variables = fst _2 @ _1.variables; stmts = snd _2 @ _1.stmts; body = _2 :: _1.body; funcs = [];})
# 637 "parser.ml"
               : 'block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 79 "parser.mly"
                ((_1::[],[]))
# 644 "parser.ml"
               : 'collection))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "parser.mly"
                (([],_1::[]))
# 651 "parser.ml"
               : 'collection))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
          (Int)
# 657 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                (Bool)
# 663 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                (Void)
# 669 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                (Char)
# 675 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                (Double)
# 681 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                (Aa)
# 687 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                (Nuc)
# 693 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
               (Seq)
# 699 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
               (Str)
# 705 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                    ([])
# 711 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                    ( _2 :: _1 )
# 719 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                    ( Expr _1 )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 99 "parser.mly"
                                (Return _2 )
# 733 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 100 "parser.mly"
                            (Block(List.rev _2))
# 740 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 101 "parser.mly"
                                                            ( For(_2, _4, _6, _8.stmts, _8.variables, _8.body) )
# 750 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 102 "parser.mly"
                                   ( While(_2, _4.stmts, _4.variables, _4.body) )
# 758 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'bstmt) in
    Obj.repr(
# 103 "parser.mly"
                                    ( If(_2, _4.stmts, _4.variables, _4.body, _5) )
# 767 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                        (Nobranching)
# 773 "parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bstmt) in
    Obj.repr(
# 107 "parser.mly"
                                     ( Elseif(_2, _4.stmts, _4.variables, _4.body, _5) )
# 782 "parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 108 "parser.mly"
                     ( Else(_2.stmts, _2.variables, _2.body))
# 789 "parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                ( Litbool(true) )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                ( Litbool(false) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                ( Id(_1) )
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 114 "parser.mly"
                (Litint(_1))
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 115 "parser.mly"
                    ( Litdouble(_1) )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "parser.mly"
                    ( Sequence(_1) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
                      ( Stringlit(_1))
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                      (Binop(_1,Add,_3))
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                      (Binop(_1,Sub,_3))
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                      (Binop(_1,Mult,_3))
# 860 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                      (Binop(_1,Div,_3))
# 868 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                      (Binop(_1,Mod,_3))
# 876 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                            (Binop(_1,Exp,_3))
# 884 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                    (Binop(_1,And,_3))
# 892 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                  (Binop(_1,Or,_3))
# 900 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                    (Binop(_1,Equal,_3))
# 908 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                    (Binop(_1,Neq,_3))
# 916 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                   (Binop(_1,Less,_3))
# 924 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                   (Binop(_1,Leq,_3))
# 932 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                   (Binop(_1,Greater,_3))
# 940 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                   (Binop(_1,Geq,_3))
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                             (Lunop(Neg, _2))
# 955 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                 (Lunop(Not, _2))
# 962 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                      (Lunop(Comp, _2))
# 969 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                        (Runop(_1, Transcb))
# 976 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                        (Runop(_1, Translt))
# 983 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                            (Runop(_1, Translttwo))
# 990 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                        (Assign(_1, _3))
# 998 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                            (_2)
# 1005 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 140 "parser.mly"
                                        (Call(_1, _3))
# 1013 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
                        (Noexpr)
# 1019 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                ( _1 )
# 1026 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
                      ( [] )
# 1032 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 148 "parser.mly"
                     ( List.rev _1 )
# 1039 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
             ( [_1] )
# 1046 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                                ( _3 :: _1 )
# 1054 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
