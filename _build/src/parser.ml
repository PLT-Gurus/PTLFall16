type token =
  | ASSIGN
  | OR
  | AND
  | NOT
  | NEG
  | LT
  | LEQ
  | EQ
  | NEQ
  | GEQ
  | GT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULO
  | EXPONENTIAL
  | COMPLEMENT
  | TRANSCRIBE
  | TRANSLATE
  | TRANSLATETWO
  | BEGIN
  | END
  | IF
  | ELSEIF
  | ELSE
  | THEN
  | FOR
  | WHILE
  | CONTINUE
  | BREAK
  | NUC
  | INT
  | DOUBLE
  | AA
  | BOOL
  | CHAR
  | VOID
  | STRING
  | CODON
  | SEQUENCE
  | TRUE
  | FALSE
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | COLON
  | INCLUDE
  | RETURN
  | EOF
  | LOCAL
  | VARIABLE
  | INT_LIT of (int)
  | ID of (string)
  | SEQUENCE_LIT of (string)
  | DOUBLE_LIT of (float)
  | STRING_LIT of (string)

open Parsing;;
let _ = parse_error;;
# 2 "src/parser.mly"
open Ast
# 68 "src/parser.ml"
let yytransl_const = [|
  257 (* ASSIGN *);
  258 (* OR *);
  259 (* AND *);
  260 (* NOT *);
  261 (* NEG *);
  262 (* LT *);
  263 (* LEQ *);
  264 (* EQ *);
  265 (* NEQ *);
  266 (* GEQ *);
  267 (* GT *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MODULO *);
  273 (* EXPONENTIAL *);
  274 (* COMPLEMENT *);
  275 (* TRANSCRIBE *);
  276 (* TRANSLATE *);
  277 (* TRANSLATETWO *);
  278 (* BEGIN *);
  279 (* END *);
  280 (* IF *);
  281 (* ELSEIF *);
  282 (* ELSE *);
  283 (* THEN *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* CONTINUE *);
  287 (* BREAK *);
  288 (* NUC *);
  289 (* INT *);
  290 (* DOUBLE *);
  291 (* AA *);
  292 (* BOOL *);
  293 (* CHAR *);
  294 (* VOID *);
  295 (* STRING *);
  296 (* CODON *);
  297 (* SEQUENCE *);
  298 (* TRUE *);
  299 (* FALSE *);
  300 (* LPAREN *);
  301 (* RPAREN *);
  302 (* LBRACK *);
  303 (* RBRACK *);
  304 (* SEMI *);
  305 (* COMMA *);
  306 (* COLON *);
  307 (* INCLUDE *);
  308 (* RETURN *);
    0 (* EOF *);
  309 (* LOCAL *);
  310 (* VARIABLE *);
    0|]

let yytransl_block = [|
  311 (* INT_LIT *);
  312 (* ID *);
  313 (* SEQUENCE_LIT *);
  314 (* DOUBLE_LIT *);
  315 (* STRING_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\008\000\
\008\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\007\000\007\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\011\000\011\000\011\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\010\000\010\000\012\000\012\000\
\013\000\013\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\007\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\000\000\002\000\002\000\003\000\003\000\009\000\
\005\000\006\000\005\000\000\000\005\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\002\000\002\000\002\000\
\002\000\003\000\003\000\004\000\000\000\001\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\067\000\000\000\000\000\000\000\000\000\019\000\
\000\000\000\000\000\000\016\000\010\000\014\000\015\000\011\000\
\013\000\012\000\018\000\017\000\031\000\032\000\000\000\000\000\
\001\000\034\000\000\000\036\000\035\000\037\000\003\000\004\000\
\000\000\000\000\053\000\052\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\057\000\
\021\000\023\000\020\000\000\000\019\000\000\000\019\000\059\000\
\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\000\000\
\000\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\025\000\000\000\027\000\008\000\019\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\019\000\
\019\000\005\000\009\000\000\000\000\000\029\000\024\000"

let yydgoto = "\002\000\
\003\000\004\000\067\000\032\000\068\000\102\000\038\000\103\000\
\034\000\041\000\106\000\076\000\077\000"

let yysindex = "\022\000\
\000\000\000\000\000\000\001\000\022\255\022\255\022\255\000\000\
\022\255\022\255\022\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\255\022\255\
\000\000\000\000\016\255\000\000\000\000\000\000\000\000\000\000\
\225\254\201\001\000\000\000\000\000\000\129\255\031\002\097\002\
\237\254\053\002\008\002\238\254\022\255\022\255\017\255\022\255\
\022\255\022\255\022\255\022\255\022\255\022\255\022\255\022\255\
\022\255\022\255\022\255\022\255\022\255\000\000\000\000\000\000\
\000\000\000\000\000\000\234\254\000\000\022\255\000\000\000\000\
\000\000\097\002\097\002\247\254\244\254\022\255\254\000\116\002\
\132\002\166\001\166\001\166\001\166\001\166\001\166\001\203\000\
\203\000\249\254\249\254\249\254\000\000\037\255\082\255\221\001\
\176\255\000\000\022\255\244\001\239\254\252\254\013\255\022\255\
\000\000\019\255\022\255\000\000\097\002\000\000\000\000\000\000\
\254\000\075\002\142\000\000\000\036\255\048\000\015\255\000\000\
\000\000\000\000\000\000\082\255\095\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\255\
\000\000\000\000\235\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\240\254\
\000\000\000\000\000\000\000\000\000\000\027\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\235\254\226\254\000\000\028\255\000\000\039\255\043\255\
\147\255\065\001\075\001\098\001\124\001\147\001\157\001\016\001\
\042\001\200\000\223\000\249\000\000\000\000\000\064\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\255\000\000\
\000\000\000\000\063\255\000\000\227\254\000\000\000\000\000\000\
\000\000\000\000\070\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\090\000\000\000\252\255\000\000\218\255\000\000\
\254\255\234\255\228\255\000\000\000\000"

let yytablesize = 921
let yytable = "\033\000\
\025\000\044\000\035\000\036\000\037\000\058\000\039\000\040\000\
\042\000\061\000\062\000\062\000\063\000\064\000\065\000\066\000\
\045\000\078\000\065\000\066\000\043\000\040\000\001\000\058\000\
\047\000\005\000\058\000\058\000\070\000\073\000\095\000\062\000\
\097\000\094\000\006\000\098\000\099\000\078\000\111\000\007\000\
\112\000\116\000\074\000\075\000\045\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\046\000\079\000\113\000\121\000\021\000\
\022\000\023\000\115\000\096\000\061\000\045\000\123\000\063\000\
\064\000\118\000\101\000\100\000\026\000\027\000\028\000\029\000\
\030\000\124\000\125\000\006\000\117\000\005\000\028\000\045\000\
\007\000\061\000\045\000\045\000\030\000\031\000\006\000\126\000\
\109\000\000\000\000\000\007\000\000\000\114\000\000\000\008\000\
\040\000\009\000\104\000\105\000\119\000\010\000\011\000\000\000\
\000\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\000\000\020\000\021\000\022\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\024\000\000\000\000\000\
\026\000\027\000\028\000\029\000\030\000\006\000\000\000\000\000\
\000\000\000\000\007\000\000\000\044\000\044\000\008\000\066\000\
\009\000\000\000\000\000\000\000\010\000\011\000\000\000\000\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\000\000\020\000\021\000\022\000\023\000\044\000\000\000\000\000\
\000\000\000\000\000\000\005\000\024\000\000\000\000\000\026\000\
\027\000\028\000\029\000\030\000\006\000\000\000\000\000\044\000\
\000\000\007\000\044\000\044\000\000\000\008\000\108\000\009\000\
\000\000\000\000\000\000\010\000\011\000\000\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\000\000\
\020\000\021\000\022\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\026\000\027\000\
\028\000\029\000\030\000\000\000\033\000\033\000\000\000\000\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\033\000\033\000\
\000\000\000\000\000\000\000\000\005\000\033\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\008\000\033\000\
\009\000\000\000\033\000\033\000\010\000\011\000\000\000\000\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\000\000\020\000\021\000\022\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\024\000\000\000\000\000\026\000\
\027\000\028\000\029\000\030\000\006\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\008\000\122\000\009\000\
\000\000\000\000\000\000\010\000\011\000\000\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\000\000\
\020\000\021\000\022\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\024\000\000\000\000\000\026\000\027\000\
\028\000\029\000\030\000\006\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\008\000\127\000\009\000\000\000\
\000\000\000\000\010\000\011\000\000\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\000\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\024\000\000\000\000\000\026\000\027\000\028\000\
\029\000\030\000\006\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\000\000\009\000\000\000\000\000\
\000\000\010\000\011\000\000\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\000\000\020\000\021\000\
\022\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\026\000\027\000\028\000\029\000\
\030\000\040\000\040\000\000\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\058\000\059\000\060\000\061\000\000\000\062\000\063\000\064\000\
\041\000\041\000\040\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\040\000\
\040\000\041\000\042\000\042\000\000\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\000\000\041\000\000\000\000\000\041\000\041\000\
\000\000\038\000\038\000\042\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\042\000\020\000\000\000\
\042\000\042\000\038\000\039\000\039\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000\038\000\
\038\000\000\000\048\000\048\000\039\000\000\000\048\000\048\000\
\048\000\048\000\048\000\048\000\049\000\049\000\000\000\000\000\
\049\000\049\000\049\000\049\000\049\000\049\000\039\000\000\000\
\000\000\039\000\039\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\049\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\048\000\000\000\000\000\
\048\000\048\000\000\000\000\000\000\000\000\000\000\000\049\000\
\000\000\000\000\049\000\049\000\046\000\047\000\047\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\046\000\046\000\000\000\051\000\051\000\047\000\000\000\
\051\000\051\000\051\000\051\000\051\000\051\000\050\000\050\000\
\000\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\047\000\000\000\000\000\047\000\047\000\051\000\000\000\000\000\
\000\000\056\000\057\000\058\000\059\000\060\000\061\000\050\000\
\062\000\063\000\064\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\051\000\051\000\000\000\000\000\000\000\000\000\
\000\000\050\000\048\000\049\000\050\000\050\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\000\000\062\000\063\000\064\000\048\000\049\000\
\000\000\000\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\000\000\062\000\
\063\000\064\000\000\000\000\000\000\000\048\000\049\000\000\000\
\065\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\000\000\062\000\063\000\
\064\000\048\000\049\000\000\000\107\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\000\000\062\000\063\000\064\000\000\000\000\000\000\000\
\048\000\049\000\000\000\110\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\000\000\062\000\063\000\064\000\072\000\000\000\048\000\049\000\
\000\000\069\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\000\000\062\000\
\063\000\064\000\000\000\000\000\048\000\049\000\000\000\071\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\000\000\062\000\063\000\064\000\
\000\000\000\000\048\000\049\000\000\000\120\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\000\000\062\000\063\000\064\000\049\000\000\000\
\000\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\000\000\062\000\063\000\
\064\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\000\000\062\000\063\000\
\064\000"

let yycheck = "\004\000\
\000\000\024\000\005\000\006\000\007\000\027\001\009\000\010\000\
\011\000\017\001\027\001\019\001\020\001\021\001\045\001\045\001\
\001\001\001\001\049\001\049\001\023\000\024\000\001\000\045\001\
\056\001\004\001\048\001\049\001\048\001\048\001\069\000\048\001\
\071\000\056\001\013\001\045\001\049\001\001\001\056\001\018\001\
\045\001\023\001\045\000\046\000\002\001\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\044\001\044\001\049\001\027\001\042\001\
\043\001\044\001\105\000\070\000\048\001\027\001\056\001\045\001\
\045\001\112\000\079\000\078\000\055\001\056\001\057\001\058\001\
\059\001\120\000\121\000\045\001\107\000\004\001\023\001\045\001\
\045\001\027\001\048\001\049\001\023\001\004\000\013\001\124\000\
\099\000\255\255\255\255\018\001\255\255\104\000\255\255\022\001\
\107\000\024\001\025\001\026\001\113\000\028\001\029\001\255\255\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\255\255\041\001\042\001\043\001\044\001\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\052\001\255\255\255\255\
\055\001\056\001\057\001\058\001\059\001\013\001\255\255\255\255\
\255\255\255\255\018\001\255\255\002\001\003\001\022\001\023\001\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\043\001\044\001\027\001\255\255\255\255\
\255\255\255\255\255\255\004\001\052\001\255\255\255\255\055\001\
\056\001\057\001\058\001\059\001\013\001\255\255\255\255\045\001\
\255\255\018\001\048\001\049\001\255\255\022\001\023\001\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\255\255\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\255\255\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\004\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\045\001\
\024\001\255\255\048\001\049\001\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\041\001\042\001\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\004\001\052\001\255\255\255\255\055\001\
\056\001\057\001\058\001\059\001\013\001\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\255\255\
\041\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\004\001\052\001\255\255\255\255\055\001\056\001\
\057\001\058\001\059\001\013\001\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\022\001\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\255\255\041\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\004\001\052\001\255\255\255\255\055\001\056\001\057\001\
\058\001\059\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\255\255\041\001\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\255\255\255\255\055\001\056\001\057\001\058\001\
\059\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\002\001\003\001\027\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\255\255\255\255\255\255\255\255\045\001\255\255\255\255\048\001\
\049\001\027\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\255\255\045\001\255\255\255\255\048\001\049\001\
\255\255\002\001\003\001\027\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\045\001\041\001\255\255\
\048\001\049\001\027\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\045\001\255\255\255\255\048\001\
\049\001\255\255\002\001\003\001\027\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\045\001\255\255\
\255\255\048\001\049\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\027\001\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\045\001\255\255\255\255\
\048\001\049\001\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\255\255\048\001\049\001\027\001\002\001\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\255\255\
\255\255\048\001\049\001\255\255\002\001\003\001\027\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\045\001\255\255\255\255\048\001\049\001\027\001\255\255\255\255\
\255\255\012\001\013\001\014\001\015\001\016\001\017\001\027\001\
\019\001\020\001\021\001\255\255\255\255\255\255\255\255\045\001\
\255\255\255\255\048\001\049\001\255\255\255\255\255\255\255\255\
\255\255\045\001\002\001\003\001\048\001\049\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\255\255\255\255\255\255\002\001\003\001\255\255\
\048\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\002\001\003\001\255\255\048\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\255\255\255\255\255\255\
\002\001\003\001\255\255\048\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\045\001\255\255\002\001\003\001\
\255\255\027\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\255\255\255\255\002\001\003\001\255\255\027\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\255\255\255\255\002\001\003\001\255\255\027\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\003\001\255\255\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001"

let yynames_const = "\
  ASSIGN\000\
  OR\000\
  AND\000\
  NOT\000\
  NEG\000\
  LT\000\
  LEQ\000\
  EQ\000\
  NEQ\000\
  GEQ\000\
  GT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULO\000\
  EXPONENTIAL\000\
  COMPLEMENT\000\
  TRANSCRIBE\000\
  TRANSLATE\000\
  TRANSLATETWO\000\
  BEGIN\000\
  END\000\
  IF\000\
  ELSEIF\000\
  ELSE\000\
  THEN\000\
  FOR\000\
  WHILE\000\
  CONTINUE\000\
  BREAK\000\
  NUC\000\
  INT\000\
  DOUBLE\000\
  AA\000\
  BOOL\000\
  CHAR\000\
  VOID\000\
  STRING\000\
  CODON\000\
  SEQUENCE\000\
  TRUE\000\
  FALSE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  SEMI\000\
  COMMA\000\
  COLON\000\
  INCLUDE\000\
  RETURN\000\
  EOF\000\
  LOCAL\000\
  VARIABLE\000\
  "

let yynames_block = "\
  INT_LIT\000\
  ID\000\
  SEQUENCE_LIT\000\
  DOUBLE_LIT\000\
  STRING_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 46 "src/parser.mly"
                   (_1)
# 529 "src/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "src/parser.mly"
        ({stmts = []; funcs = [];})
# 535 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 49 "src/parser.mly"
                   ({stmts = _1.stmts @ [_2] ; funcs = _1.funcs;})
# 543 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 51 "src/parser.mly"
                        ({stmts = _1.stmts; funcs = _1.funcs @ [_2] })
# 551 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 55 "src/parser.mly"
    ({ typ = _1; fname = _2; formals = _4; stmts = List.rev _6;})
# 561 "src/parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "src/parser.mly"
                  ([])
# 567 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 59 "src/parser.mly"
                    ( List.rev _1 )
# 574 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "src/parser.mly"
            ([(_1, _2)])
# 582 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "src/parser.mly"
                              ( (_3, _4) :: _1 )
# 591 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "src/parser.mly"
                (Int)
# 597 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "src/parser.mly"
                (Bool)
# 603 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "src/parser.mly"
                (Void)
# 609 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "src/parser.mly"
                (Char)
# 615 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "src/parser.mly"
                (Double)
# 621 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "src/parser.mly"
                (Aa)
# 627 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "src/parser.mly"
                (Nuc)
# 633 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "src/parser.mly"
                 (Seq)
# 639 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "src/parser.mly"
               (Str)
# 645 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "src/parser.mly"
                    ([])
# 651 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 80 "src/parser.mly"
                       ( _2 :: _1 )
# 659 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "src/parser.mly"
                    ( Expr _1 )
# 666 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 84 "src/parser.mly"
                                (Return _2 )
# 673 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 85 "src/parser.mly"
                              (Block(List.rev _2))
# 680 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 86 "src/parser.mly"
                                                                ( For(_2, _4, _6, Block(List.rev _8)) )
# 690 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 87 "src/parser.mly"
                                       ( While(_2, Block(List.rev _4)) )
# 698 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'bstmt) in
    Obj.repr(
# 88 "src/parser.mly"
                                        ( If(_2, Block(List.rev _4), _5) )
# 707 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "src/parser.mly"
                                   ( VDecl(_1, _2, _4))
# 716 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "src/parser.mly"
                        (Nobranching)
# 722 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bstmt) in
    Obj.repr(
# 93 "src/parser.mly"
                                         ( Elseif(_2, Block(List.rev _4), _5) )
# 731 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 94 "src/parser.mly"
                         ( Else(Block(List.rev _2)))
# 738 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "src/parser.mly"
                ( Litbool(true) )
# 744 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "src/parser.mly"
                ( Litbool(false) )
# 750 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "src/parser.mly"
                ( Id(_1) )
# 757 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "src/parser.mly"
                (Litint(_1))
# 764 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 101 "src/parser.mly"
                    ( Litdouble(_1) )
# 771 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "src/parser.mly"
                      ( Sequence(_1) )
# 778 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "src/parser.mly"
                      ( Stringlit(_1))
# 785 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "src/parser.mly"
                        (Binop(_1,Add,_3))
# 793 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "src/parser.mly"
                        (Binop(_1,Sub,_3))
# 801 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "src/parser.mly"
                        (Binop(_1,Mult,_3))
# 809 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "src/parser.mly"
                        (Binop(_1,Div,_3))
# 817 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "src/parser.mly"
                        (Binop(_1,Mod,_3))
# 825 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "src/parser.mly"
                              (Binop(_1,Exp,_3))
# 833 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "src/parser.mly"
                      (Binop(_1,And,_3))
# 841 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "src/parser.mly"
                    (Binop(_1,Or,_3))
# 849 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "src/parser.mly"
                      (Binop(_1,Equal,_3))
# 857 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "src/parser.mly"
                      (Binop(_1,Neq,_3))
# 865 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "src/parser.mly"
                     (Binop(_1,Less,_3))
# 873 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "src/parser.mly"
                     (Binop(_1,Leq,_3))
# 881 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "src/parser.mly"
                     (Binop(_1,Greater,_3))
# 889 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "src/parser.mly"
                     (Binop(_1,Geq,_3))
# 897 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "src/parser.mly"
                             (Lunop(Neg, _2))
# 904 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "src/parser.mly"
                 (Lunop(Not, _2))
# 911 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "src/parser.mly"
                        (Lunop(Comp, _2))
# 918 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 121 "src/parser.mly"
                        (Runop(_1, Transcb))
# 925 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 122 "src/parser.mly"
                        (Runop(_1, Translt))
# 932 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "src/parser.mly"
                            (Runop(_1, Translttwo))
# 939 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "src/parser.mly"
                        (Assign(_1, _3))
# 947 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 125 "src/parser.mly"
                            (_2)
# 954 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 126 "src/parser.mly"
                                        (Call(_1, _3))
# 962 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "src/parser.mly"
                        (Noexpr)
# 968 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "src/parser.mly"
                ( _1 )
# 975 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "src/parser.mly"
                      ( [] )
# 981 "src/parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 134 "src/parser.mly"
                     ( List.rev _1 )
# 988 "src/parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "src/parser.mly"
             ( [_1] )
# 995 "src/parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "src/parser.mly"
                                ( _3 :: _1 )
# 1003 "src/parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
