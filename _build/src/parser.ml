type token =
  | ASSIGN
  | OR
  | AND
  | NOT
  | NEG
  | LT
  | LEQ
  | EQ
  | NEQ
  | GEQ
  | GT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULO
  | EXPONENTIAL
  | COMPLEMENT
  | TRANSCRIBE
  | TRANSLATE
  | TRANSLATETWO
  | BEGIN
  | END
  | IF
  | ELSEIF
  | ELSE
  | THEN
  | FOR
  | WHILE
  | CONTINUE
  | BREAK
  | SIZEOF
  | NUC
  | INT
  | DOUBLE
  | AA
  | BOOL
  | CHAR
  | VOID
  | STRING
  | DNA
  | RNA
  | CODON
  | SEQUENCE
  | PEPTIDE
  | TRUE
  | FALSE
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | COLON
  | PERIOD
  | INCLUDE
  | RETURN
  | EOF
  | LOCAL
  | VARIABLE
  | INT_LIT of (int)
  | ID of (string)
  | SEQUENCE_LIT of (string)
  | DNA_LIT of (string)
  | RNA_LIT of (string)
  | PEP_LIT of (string)
  | DOUBLE_LIT of (float)
  | STRING_LIT of (string)

open Parsing;;
let _ = parse_error;;
# 2 "src/parser.mly"
open Ast
# 76 "src/parser.ml"
let yytransl_const = [|
  257 (* ASSIGN *);
  258 (* OR *);
  259 (* AND *);
  260 (* NOT *);
  261 (* NEG *);
  262 (* LT *);
  263 (* LEQ *);
  264 (* EQ *);
  265 (* NEQ *);
  266 (* GEQ *);
  267 (* GT *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MODULO *);
  273 (* EXPONENTIAL *);
  274 (* COMPLEMENT *);
  275 (* TRANSCRIBE *);
  276 (* TRANSLATE *);
  277 (* TRANSLATETWO *);
  278 (* BEGIN *);
  279 (* END *);
  280 (* IF *);
  281 (* ELSEIF *);
  282 (* ELSE *);
  283 (* THEN *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* CONTINUE *);
  287 (* BREAK *);
  288 (* SIZEOF *);
  289 (* NUC *);
  290 (* INT *);
  291 (* DOUBLE *);
  292 (* AA *);
  293 (* BOOL *);
  294 (* CHAR *);
  295 (* VOID *);
  296 (* STRING *);
  297 (* DNA *);
  298 (* RNA *);
  299 (* CODON *);
  300 (* SEQUENCE *);
  301 (* PEPTIDE *);
  302 (* TRUE *);
  303 (* FALSE *);
  304 (* LPAREN *);
  305 (* RPAREN *);
  306 (* LBRACK *);
  307 (* RBRACK *);
  308 (* SEMI *);
  309 (* COMMA *);
  310 (* COLON *);
  311 (* PERIOD *);
  312 (* INCLUDE *);
  313 (* RETURN *);
    0 (* EOF *);
  314 (* LOCAL *);
  315 (* VARIABLE *);
    0|]

let yytransl_block = [|
  316 (* INT_LIT *);
  317 (* ID *);
  318 (* SEQUENCE_LIT *);
  319 (* DNA_LIT *);
  320 (* RNA_LIT *);
  321 (* PEP_LIT *);
  322 (* DOUBLE_LIT *);
  323 (* STRING_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\008\000\
\008\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\007\000\007\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\011\000\011\000\011\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\010\000\
\010\000\012\000\012\000\013\000\013\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\007\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\002\000\
\002\000\003\000\003\000\009\000\005\000\006\000\005\000\006\000\
\000\000\005\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\004\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\006\000\003\000\004\000\003\000\000\000\
\001\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\078\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\016\000\010\000\014\000\015\000\011\000\
\013\000\012\000\022\000\019\000\020\000\017\000\018\000\021\000\
\036\000\037\000\000\000\000\000\001\000\039\000\000\000\041\000\
\043\000\044\000\045\000\040\000\046\000\003\000\004\000\000\000\
\000\000\062\000\061\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
\065\000\066\000\025\000\027\000\024\000\000\000\023\000\000\000\
\023\000\069\000\026\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\000\000\070\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\029\000\000\000\000\000\000\000\031\000\008\000\
\023\000\000\000\000\000\000\000\030\000\000\000\000\000\032\000\
\000\000\000\000\023\000\023\000\005\000\009\000\000\000\000\000\
\034\000\028\000"

let yydgoto = "\002\000\
\003\000\004\000\077\000\039\000\078\000\117\000\045\000\118\000\
\041\000\048\000\121\000\086\000\087\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\001\000\020\001\020\001\020\001\000\000\
\020\001\020\001\020\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\001\020\001\000\000\000\000\022\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216\254\
\085\002\000\000\000\000\000\000\158\255\230\002\040\003\224\254\
\252\002\207\002\226\254\020\001\020\001\020\001\252\254\020\001\
\005\255\020\001\020\001\020\001\020\001\020\001\020\001\020\001\
\020\001\020\001\020\001\020\001\020\001\020\001\020\001\000\000\
\000\000\000\000\000\000\000\000\000\000\219\254\000\000\020\001\
\000\000\000\000\000\000\040\003\040\003\236\254\237\254\161\002\
\000\000\183\002\020\001\064\003\059\003\075\003\243\255\243\255\
\243\255\243\255\243\255\243\255\193\255\193\255\254\254\254\254\
\254\254\000\000\043\255\103\255\114\002\056\000\000\000\020\001\
\044\255\241\254\136\002\013\255\006\255\023\255\020\001\000\000\
\052\255\020\001\000\000\040\003\020\001\027\255\000\000\000\000\
\000\000\064\003\018\003\221\000\000\000\054\255\040\003\000\000\
\111\000\021\255\000\000\000\000\000\000\000\000\103\255\166\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\255\000\000\000\000\225\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\243\254\000\000\
\000\000\000\000\000\000\000\000\035\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\240\254\234\254\000\000\036\255\000\000\
\000\000\000\000\000\000\037\255\106\255\046\255\204\001\233\001\
\000\002\010\002\033\002\062\002\169\001\181\001\094\001\117\001\
\146\001\000\000\000\000\064\255\000\000\000\000\000\000\000\000\
\042\001\000\000\000\000\000\000\000\000\045\255\000\000\000\000\
\000\000\065\255\000\000\250\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\255\000\000\000\000\245\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\255\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\096\000\000\000\252\255\000\000\207\255\000\000\
\254\255\230\255\214\255\000\000\000\000"

let yytablesize = 1133
let yytable = "\040\000\
\029\000\051\000\042\000\043\000\044\000\091\000\046\000\047\000\
\049\000\056\000\067\000\001\000\056\000\073\000\071\000\068\000\
\072\000\073\000\074\000\080\000\057\000\083\000\052\000\107\000\
\050\000\047\000\076\000\089\000\111\000\108\000\076\000\110\000\
\067\000\112\000\067\000\067\000\067\000\068\000\073\000\068\000\
\068\000\068\000\077\000\091\000\125\000\126\000\077\000\053\000\
\053\000\084\000\085\000\088\000\092\000\090\000\129\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\106\000\053\000\132\000\054\000\
\053\000\128\000\133\000\130\000\055\000\109\000\136\000\137\000\
\140\000\142\000\072\000\074\000\075\000\006\000\033\000\116\000\
\115\000\143\000\144\000\072\000\035\000\007\000\053\000\134\000\
\053\000\053\000\053\000\038\000\145\000\000\000\000\000\000\000\
\000\000\000\000\005\000\054\000\000\000\124\000\000\000\000\000\
\000\000\000\000\000\000\006\000\131\000\000\000\000\000\047\000\
\007\000\000\000\135\000\000\000\008\000\138\000\009\000\119\000\
\120\000\000\000\010\000\011\000\054\000\000\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\000\000\054\000\000\000\054\000\054\000\054\000\028\000\
\000\000\005\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\006\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\076\000\009\000\000\000\000\000\
\000\000\010\000\011\000\000\000\000\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\068\000\069\000\
\070\000\071\000\000\000\072\000\073\000\074\000\028\000\000\000\
\000\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\000\000\038\000\038\000\000\000\000\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\038\000\038\000\038\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\066\000\067\000\
\068\000\069\000\070\000\071\000\005\000\072\000\073\000\074\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\038\000\007\000\038\000\038\000\038\000\008\000\000\000\
\009\000\000\000\000\000\000\000\010\000\011\000\000\000\000\000\
\000\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\000\000\005\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\006\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\008\000\123\000\009\000\
\000\000\000\000\000\000\010\000\011\000\000\000\000\000\000\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\000\000\005\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\006\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\008\000\141\000\009\000\000\000\
\000\000\000\000\010\000\011\000\000\000\000\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\005\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\006\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\008\000\146\000\009\000\000\000\000\000\
\000\000\010\000\011\000\000\000\000\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\000\000\
\005\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\006\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\008\000\000\000\009\000\000\000\000\000\000\000\
\010\000\011\000\000\000\000\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\028\000\000\000\005\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\006\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\042\000\042\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\042\000\042\000\042\000\000\000\
\000\000\025\000\026\000\027\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\000\000\
\000\000\000\000\042\000\000\000\042\000\042\000\042\000\049\000\
\049\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\049\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\050\000\
\049\000\049\000\049\000\051\000\051\000\000\000\000\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\000\000\000\000\050\000\000\000\050\000\
\050\000\050\000\047\000\047\000\051\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\048\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\051\000\047\000\051\000\051\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\057\000\048\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
\000\000\047\000\000\000\047\000\047\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\057\000\048\000\
\048\000\048\000\058\000\058\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\000\000\057\000\057\000\
\057\000\055\000\055\000\058\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\056\000\056\000\000\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\000\000\000\000\000\000\
\000\000\058\000\055\000\058\000\058\000\058\000\000\000\000\000\
\000\000\000\000\060\000\060\000\056\000\000\000\060\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\000\000\000\000\
\055\000\000\000\055\000\055\000\055\000\000\000\000\000\000\000\
\000\000\000\000\056\000\060\000\056\000\056\000\056\000\059\000\
\059\000\000\000\000\000\059\000\059\000\059\000\059\000\059\000\
\059\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\060\000\060\000\060\000\058\000\059\000\
\059\000\000\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\000\000\072\000\
\073\000\074\000\000\000\000\000\000\000\000\000\059\000\000\000\
\059\000\059\000\059\000\058\000\059\000\000\000\000\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\000\000\072\000\073\000\074\000\000\000\
\075\000\058\000\059\000\000\000\000\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\000\000\072\000\073\000\074\000\000\000\000\000\000\000\
\000\000\000\000\058\000\059\000\000\000\122\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\000\000\072\000\073\000\074\000\000\000\000\000\
\058\000\059\000\000\000\127\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\000\000\072\000\073\000\074\000\000\000\000\000\000\000\000\000\
\058\000\059\000\000\000\113\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\000\000\072\000\073\000\074\000\000\000\000\000\000\000\058\000\
\059\000\114\000\000\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\000\000\
\072\000\073\000\074\000\000\000\000\000\058\000\059\000\082\000\
\079\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\000\000\072\000\073\000\
\074\000\000\000\000\000\058\000\059\000\000\000\081\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\000\000\072\000\073\000\074\000\000\000\
\000\000\058\000\059\000\000\000\139\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\000\000\072\000\073\000\074\000\059\000\000\000\000\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\072\000\073\000\074\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\000\000\072\000\073\000\074\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000"

let yycheck = "\004\000\
\000\000\028\000\005\000\006\000\007\000\001\001\009\000\010\000\
\011\000\050\001\027\001\001\000\050\001\027\001\017\001\027\001\
\019\001\020\001\021\001\052\001\061\001\052\001\001\001\061\001\
\027\000\028\000\049\001\032\001\049\001\079\000\053\001\081\000\
\049\001\053\001\051\001\052\001\053\001\049\001\052\001\051\001\
\052\001\053\001\049\001\001\001\001\001\061\001\053\001\002\001\
\003\001\052\000\053\000\054\000\048\001\056\000\049\001\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\048\001\120\000\050\001\
\027\001\061\001\023\001\053\001\055\001\080\000\052\001\129\000\
\027\001\061\001\052\001\049\001\049\001\049\001\023\001\092\000\
\091\000\139\000\140\000\027\001\023\001\049\001\049\001\122\000\
\051\001\052\001\053\001\004\000\143\000\255\255\255\255\255\255\
\255\255\255\255\004\001\002\001\255\255\112\000\255\255\255\255\
\255\255\255\255\255\255\013\001\119\000\255\255\255\255\122\000\
\018\001\255\255\125\000\255\255\022\001\130\000\024\001\025\001\
\026\001\255\255\028\001\029\001\027\001\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\255\255\049\001\255\255\051\001\052\001\053\001\057\001\
\255\255\004\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\057\001\255\255\
\255\255\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\255\255\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\004\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\049\001\018\001\051\001\052\001\053\001\022\001\255\255\
\024\001\255\255\255\255\255\255\028\001\029\001\255\255\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\057\001\255\255\004\001\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\013\001\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\057\001\255\255\004\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\013\001\255\255\255\255\255\255\255\255\
\018\001\255\255\255\255\255\255\022\001\023\001\024\001\255\255\
\255\255\255\255\028\001\029\001\255\255\255\255\255\255\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\255\255\004\001\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\057\001\255\255\
\004\001\060\001\061\001\062\001\063\001\064\001\065\001\066\001\
\067\001\013\001\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\057\001\255\255\004\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\013\001\255\255\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\255\255\
\255\255\046\001\047\001\048\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\067\001\255\255\
\255\255\255\255\049\001\255\255\051\001\052\001\053\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\027\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\027\001\
\051\001\052\001\053\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\255\255\255\255\255\255\049\001\255\255\051\001\
\052\001\053\001\002\001\003\001\027\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\002\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\049\001\027\001\051\001\052\001\053\001\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\003\001\027\001\
\255\255\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\049\001\255\255\051\001\052\001\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\027\001\051\001\
\052\001\053\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\051\001\052\001\
\053\001\002\001\003\001\027\001\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\049\001\027\001\051\001\052\001\053\001\255\255\255\255\
\255\255\255\255\002\001\003\001\027\001\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\049\001\255\255\051\001\052\001\053\001\255\255\255\255\255\255\
\255\255\255\255\049\001\027\001\051\001\052\001\053\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\255\255\051\001\052\001\053\001\002\001\003\001\
\027\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\049\001\255\255\
\051\001\052\001\053\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\255\255\
\052\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\052\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\255\255\255\255\
\002\001\003\001\255\255\052\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\002\001\003\001\255\255\051\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\255\255\255\255\255\255\002\001\
\003\001\051\001\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\021\001\255\255\255\255\002\001\003\001\049\001\
\027\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\021\001\255\255\255\255\002\001\003\001\255\255\027\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\021\001\255\255\
\255\255\002\001\003\001\255\255\027\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\021\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001"

let yynames_const = "\
  ASSIGN\000\
  OR\000\
  AND\000\
  NOT\000\
  NEG\000\
  LT\000\
  LEQ\000\
  EQ\000\
  NEQ\000\
  GEQ\000\
  GT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULO\000\
  EXPONENTIAL\000\
  COMPLEMENT\000\
  TRANSCRIBE\000\
  TRANSLATE\000\
  TRANSLATETWO\000\
  BEGIN\000\
  END\000\
  IF\000\
  ELSEIF\000\
  ELSE\000\
  THEN\000\
  FOR\000\
  WHILE\000\
  CONTINUE\000\
  BREAK\000\
  SIZEOF\000\
  NUC\000\
  INT\000\
  DOUBLE\000\
  AA\000\
  BOOL\000\
  CHAR\000\
  VOID\000\
  STRING\000\
  DNA\000\
  RNA\000\
  CODON\000\
  SEQUENCE\000\
  PEPTIDE\000\
  TRUE\000\
  FALSE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  SEMI\000\
  COMMA\000\
  COLON\000\
  PERIOD\000\
  INCLUDE\000\
  RETURN\000\
  EOF\000\
  LOCAL\000\
  VARIABLE\000\
  "

let yynames_block = "\
  INT_LIT\000\
  ID\000\
  SEQUENCE_LIT\000\
  DNA_LIT\000\
  RNA_LIT\000\
  PEP_LIT\000\
  DOUBLE_LIT\000\
  STRING_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 49 "src/parser.mly"
                   (_1)
# 616 "src/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "src/parser.mly"
        ({pstmts = []; funcs = [];})
# 622 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 52 "src/parser.mly"
                   ({pstmts = _1.pstmts @ [_2] ; funcs = _1.funcs;})
# 630 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 54 "src/parser.mly"
                        ({pstmts = _1.pstmts; funcs = _1.funcs @ [_2] })
# 638 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 58 "src/parser.mly"
    ({ typ = _1; fname = _2; formals = _4; stmts = List.rev _6;})
# 648 "src/parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "src/parser.mly"
                  ([])
# 654 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 62 "src/parser.mly"
                    ( List.rev _1 )
# 661 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "src/parser.mly"
            ([(_1, _2)])
# 669 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "src/parser.mly"
                              ( (_3, _4) :: _1 )
# 678 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "src/parser.mly"
                (Int)
# 684 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "src/parser.mly"
                (Bool)
# 690 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "src/parser.mly"
                (Void)
# 696 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "src/parser.mly"
                (Char)
# 702 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "src/parser.mly"
                (Double)
# 708 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "src/parser.mly"
                (Aa)
# 714 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "src/parser.mly"
                (Nuc)
# 720 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "src/parser.mly"
                (Codon)
# 726 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "src/parser.mly"
                 (Seq)
# 732 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "src/parser.mly"
                (DNA)
# 738 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "src/parser.mly"
                (RNA)
# 744 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "src/parser.mly"
                (Pep)
# 750 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "src/parser.mly"
                (Str)
# 756 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "src/parser.mly"
                    ([])
# 762 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "src/parser.mly"
                       ( _2 :: _1 )
# 770 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "src/parser.mly"
                    ( Expr _1 )
# 777 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 91 "src/parser.mly"
                                (Return _2 )
# 784 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 92 "src/parser.mly"
                              (Block(List.rev _2))
# 791 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 93 "src/parser.mly"
                                                                ( For(_2, _4, _6, Block(List.rev _8)) )
# 801 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 94 "src/parser.mly"
                                       ( While(_2, Block(List.rev _4)) )
# 809 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'bstmt) in
    Obj.repr(
# 95 "src/parser.mly"
                                        ( If(_2, Block(List.rev _4), _5) )
# 818 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "src/parser.mly"
                                   ( VDecl(_1, _2, _4))
# 827 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 97 "src/parser.mly"
                                       ( ArrayDecl(_1,_3, _5))
# 836 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "src/parser.mly"
                        (Nobranching)
# 842 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bstmt) in
    Obj.repr(
# 101 "src/parser.mly"
                                         ( Elseif(_2, Block(List.rev _4), _5) )
# 851 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 102 "src/parser.mly"
                         ( Else(Block(List.rev _2)))
# 858 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "src/parser.mly"
                ( Litbool(true) )
# 864 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "src/parser.mly"
                ( Litbool(false) )
# 870 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "src/parser.mly"
                ( Id(_1) )
# 877 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 108 "src/parser.mly"
                (Litint(_1))
# 884 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 109 "src/parser.mly"
                    ( Litdouble(_1) )
# 891 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "src/parser.mly"
                      ( Sequence(_1) )
# 898 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 111 "src/parser.mly"
                              (ArrayAcc(_1, _3))
# 906 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "src/parser.mly"
                 ( Litdna(_1) )
# 913 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "src/parser.mly"
                 ( Litrna(_1) )
# 920 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "src/parser.mly"
                 ( Litpep(_1) )
# 927 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "src/parser.mly"
                      ( Stringlit(_1))
# 934 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "src/parser.mly"
                        (Binop(_1,Add,_3))
# 942 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "src/parser.mly"
                        (Binop(_1,Sub,_3))
# 950 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "src/parser.mly"
                        (Binop(_1,Mult,_3))
# 958 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "src/parser.mly"
                        (Binop(_1,Div,_3))
# 966 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "src/parser.mly"
                        (Binop(_1,Mod,_3))
# 974 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "src/parser.mly"
                              (Binop(_1,Exp,_3))
# 982 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "src/parser.mly"
                      (Binop(_1,And,_3))
# 990 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "src/parser.mly"
                    (Binop(_1,Or,_3))
# 998 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "src/parser.mly"
                      (Binop(_1,Equal,_3))
# 1006 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "src/parser.mly"
                      (Binop(_1,Neq,_3))
# 1014 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "src/parser.mly"
                     (Binop(_1,Less,_3))
# 1022 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "src/parser.mly"
                     (Binop(_1,Leq,_3))
# 1030 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "src/parser.mly"
                     (Binop(_1,Greater,_3))
# 1038 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "src/parser.mly"
                     (Binop(_1,Geq,_3))
# 1046 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "src/parser.mly"
                             (Lunop(Neg, _2))
# 1053 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "src/parser.mly"
                 (Lunop(Not, _2))
# 1060 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "src/parser.mly"
                        (Lunop(Comp, _2))
# 1067 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 133 "src/parser.mly"
                        (Runop(_1, Transcb))
# 1074 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 134 "src/parser.mly"
                        (Runop(_1, Translt))
# 1081 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 135 "src/parser.mly"
                            (Runop(_1, Translttwo))
# 1088 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "src/parser.mly"
                        (Assign(_1, _3))
# 1096 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "src/parser.mly"
                                          (ArrayAssign(_1,_3,_6))
# 1105 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "src/parser.mly"
                            (_2)
# 1112 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 139 "src/parser.mly"
                                        (Call(_1, _3))
# 1120 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 140 "src/parser.mly"
                         (SizeOf(_1))
# 1127 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "src/parser.mly"
                        (Noexpr)
# 1133 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "src/parser.mly"
                ( _1 )
# 1140 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "src/parser.mly"
                      ( [] )
# 1146 "src/parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 148 "src/parser.mly"
                     ( List.rev _1 )
# 1153 "src/parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "src/parser.mly"
             ( [_1] )
# 1160 "src/parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "src/parser.mly"
                                ( _3 :: _1 )
# 1168 "src/parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
