type token =
  | ASSIGN
  | OR
  | AND
  | NOT
  | NEG
  | LT
  | LEQ
  | EQ
  | NEQ
  | GEQ
  | GT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MODULO
  | EXPONENTIAL
  | STRCAT
  | COMPLEMENT
  | TRANSCRIBE
  | TRANSLATE
  | TRANSLATETWO
  | BEGIN
  | END
  | IF
  | ELSEIF
  | ELSE
  | THEN
  | FOR
  | WHILE
  | CONTINUE
  | BREAK
  | SIZEOF
  | FREAD
  | READ
  | CAST
  | NUC
  | INT
  | DOUBLE
  | AA
  | BOOL
  | CHAR
  | VOID
  | STRING
  | DNA
  | RNA
  | CODON
  | SEQUENCE
  | PEPTIDE
  | TRUE
  | FALSE
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | COLON
  | PERIOD
  | INCLUDE
  | RETURN
  | EOF
  | LOCAL
  | VARIABLE
  | INT_LIT of (int)
  | ID of (string)
  | SEQUENCE_LIT of (string)
  | CHAR_LIT of (char)
  | DNA_LIT of (string)
  | RNA_LIT of (string)
  | PEP_LIT of (string)
  | DOUBLE_LIT of (float)
  | STRING_LIT of (string)

open Parsing;;
let _ = parse_error;;
# 2 "src/parser.mly"
open Ast
# 81 "src/parser.ml"
let yytransl_const = [|
  257 (* ASSIGN *);
  258 (* OR *);
  259 (* AND *);
  260 (* NOT *);
  261 (* NEG *);
  262 (* LT *);
  263 (* LEQ *);
  264 (* EQ *);
  265 (* NEQ *);
  266 (* GEQ *);
  267 (* GT *);
  268 (* PLUS *);
  269 (* MINUS *);
  270 (* TIMES *);
  271 (* DIVIDE *);
  272 (* MODULO *);
  273 (* EXPONENTIAL *);
  274 (* STRCAT *);
  275 (* COMPLEMENT *);
  276 (* TRANSCRIBE *);
  277 (* TRANSLATE *);
  278 (* TRANSLATETWO *);
  279 (* BEGIN *);
  280 (* END *);
  281 (* IF *);
  282 (* ELSEIF *);
  283 (* ELSE *);
  284 (* THEN *);
  285 (* FOR *);
  286 (* WHILE *);
  287 (* CONTINUE *);
  288 (* BREAK *);
  289 (* SIZEOF *);
  290 (* FREAD *);
  291 (* READ *);
  292 (* CAST *);
  293 (* NUC *);
  294 (* INT *);
  295 (* DOUBLE *);
  296 (* AA *);
  297 (* BOOL *);
  298 (* CHAR *);
  299 (* VOID *);
  300 (* STRING *);
  301 (* DNA *);
  302 (* RNA *);
  303 (* CODON *);
  304 (* SEQUENCE *);
  305 (* PEPTIDE *);
  306 (* TRUE *);
  307 (* FALSE *);
  308 (* LPAREN *);
  309 (* RPAREN *);
  310 (* LBRACK *);
  311 (* RBRACK *);
  312 (* SEMI *);
  313 (* COMMA *);
  314 (* COLON *);
  315 (* PERIOD *);
  316 (* INCLUDE *);
  317 (* RETURN *);
    0 (* EOF *);
  318 (* LOCAL *);
  319 (* VARIABLE *);
    0|]

let yytransl_block = [|
  320 (* INT_LIT *);
  321 (* ID *);
  322 (* SEQUENCE_LIT *);
  323 (* CHAR_LIT *);
  324 (* DNA_LIT *);
  325 (* RNA_LIT *);
  326 (* PEP_LIT *);
  327 (* DOUBLE_LIT *);
  328 (* STRING_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\008\000\
\008\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\007\000\007\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\011\000\011\000\011\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\010\000\010\000\012\000\012\000\
\013\000\013\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\007\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\002\000\
\002\000\003\000\003\000\009\000\005\000\006\000\005\000\006\000\
\000\000\005\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\004\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\002\000\
\002\000\002\000\002\000\003\000\006\000\003\000\004\000\003\000\
\004\000\004\000\004\000\007\000\000\000\001\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\083\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\010\000\014\000\015\000\011\000\013\000\012\000\022\000\019\000\
\020\000\017\000\018\000\021\000\036\000\037\000\000\000\000\000\
\001\000\039\000\000\000\041\000\046\000\043\000\044\000\045\000\
\040\000\047\000\003\000\004\000\000\000\000\000\063\000\000\000\
\062\000\064\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\066\000\067\000\025\000\000\000\027\000\024\000\000\000\
\023\000\000\000\023\000\000\000\000\000\000\000\070\000\026\000\
\000\000\000\000\000\000\000\000\000\000\072\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\000\000\074\000\075\000\000\000\071\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\031\000\008\000\023\000\000\000\000\000\000\000\030\000\000\000\
\000\000\000\000\032\000\000\000\000\000\023\000\023\000\076\000\
\005\000\009\000\000\000\000\000\034\000\028\000"

let yydgoto = "\002\000\
\003\000\004\000\087\000\044\000\088\000\134\000\051\000\135\000\
\046\000\054\000\138\000\099\000\100\000"

let yysindex = "\024\000\
\000\000\000\000\000\000\001\000\159\001\231\254\159\001\159\001\
\000\000\159\001\159\001\159\001\236\254\237\254\020\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\159\001\159\001\
\000\000\000\000\027\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\255\035\255\000\000\024\255\
\000\000\000\000\070\000\134\003\209\003\240\254\163\003\246\254\
\012\255\231\254\082\003\253\254\159\001\159\001\159\001\063\255\
\159\001\006\255\159\001\159\001\159\001\159\001\159\001\159\001\
\159\001\159\001\159\001\159\001\159\001\159\001\159\001\159\001\
\000\000\000\000\000\000\000\000\159\001\000\000\000\000\067\255\
\000\000\159\001\000\000\044\255\046\255\089\255\000\000\000\000\
\209\003\209\003\053\255\059\255\032\003\000\000\061\003\159\001\
\231\254\229\003\246\003\065\000\065\000\065\000\065\000\065\000\
\065\000\108\255\108\255\138\255\138\255\138\255\000\000\065\000\
\125\255\127\255\233\002\139\000\000\000\000\000\083\255\000\000\
\159\001\135\255\073\255\010\003\077\255\090\255\094\255\159\001\
\000\000\156\255\159\001\000\000\159\001\209\003\159\001\126\255\
\000\000\000\000\000\000\231\254\186\003\090\001\000\000\153\255\
\111\003\209\003\000\000\208\000\118\255\000\000\000\000\000\000\
\000\000\000\000\127\255\021\001\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\128\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\255\
\000\000\000\000\198\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\239\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\132\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\255\230\254\000\000\133\255\000\000\000\000\000\000\000\000\
\134\255\062\255\092\255\065\002\088\002\121\002\144\002\154\002\
\177\002\194\001\053\002\230\001\253\001\030\002\000\000\210\002\
\000\000\165\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\222\255\000\000\000\000\000\000\000\000\137\255\000\000\
\000\000\000\000\174\255\000\000\000\000\036\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\179\255\000\000\000\000\
\000\000\057\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\165\255\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\212\000\000\000\252\255\000\000\201\255\000\000\
\254\255\228\255\054\000\000\000\000\000"

let yytablesize = 1292
let yytable = "\045\000\
\033\000\048\000\047\000\060\000\049\000\050\000\104\000\052\000\
\053\000\055\000\078\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\001\000\058\000\081\000\061\000\059\000\053\000\081\000\056\000\
\057\000\122\000\085\000\124\000\067\000\068\000\078\000\090\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\096\000\094\000\081\000\082\000\
\083\000\105\000\097\000\098\000\101\000\092\000\103\000\055\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\118\000\119\000\062\000\068\000\
\063\000\150\000\120\000\093\000\069\000\064\000\065\000\123\000\
\082\000\055\000\084\000\156\000\082\000\054\000\054\000\102\000\
\125\000\066\000\126\000\127\000\133\000\132\000\163\000\164\000\
\068\000\128\000\068\000\068\000\068\000\069\000\152\000\069\000\
\069\000\069\000\055\000\129\000\055\000\055\000\055\000\054\000\
\065\000\077\000\078\000\079\000\080\000\104\000\142\000\081\000\
\082\000\083\000\005\000\121\000\006\000\149\000\141\000\143\000\
\053\000\144\000\153\000\007\000\154\000\146\000\147\000\157\000\
\054\000\008\000\054\000\054\000\054\000\009\000\148\000\010\000\
\136\000\137\000\080\000\011\000\012\000\081\000\082\000\083\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\151\000\159\000\155\000\162\000\077\000\
\079\000\080\000\006\000\032\000\033\000\007\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\038\000\
\038\000\077\000\035\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\043\000\
\165\000\038\000\038\000\038\000\000\000\000\000\000\000\042\000\
\042\000\038\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\042\000\042\000\042\000\000\000\000\000\000\000\000\000\
\000\000\042\000\038\000\000\000\038\000\038\000\038\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\042\000\008\000\042\000\042\000\042\000\009\000\
\000\000\010\000\000\000\000\000\000\000\011\000\012\000\000\000\
\000\000\000\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\005\000\000\000\006\000\075\000\076\000\077\000\078\000\
\079\000\080\000\007\000\000\000\081\000\082\000\083\000\000\000\
\008\000\000\000\000\000\000\000\009\000\086\000\010\000\000\000\
\000\000\000\000\011\000\012\000\000\000\000\000\000\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\000\000\000\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\005\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\009\000\140\000\010\000\000\000\000\000\000\000\011\000\
\012\000\000\000\000\000\000\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\005\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\009\000\161\000\
\010\000\000\000\000\000\000\000\011\000\012\000\000\000\000\000\
\000\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\000\000\000\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\005\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\009\000\166\000\010\000\000\000\000\000\
\000\000\011\000\012\000\000\000\000\000\000\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\000\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\005\000\000\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\009\000\000\000\010\000\000\000\000\000\000\000\011\000\012\000\
\000\000\000\000\000\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\005\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\014\000\015\000\048\000\048\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\029\000\030\000\031\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\050\000\
\050\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\048\000\000\000\
\048\000\048\000\048\000\000\000\000\000\000\000\051\000\051\000\
\000\000\050\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\050\000\000\000\050\000\050\000\050\000\052\000\
\052\000\000\000\000\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\000\000\
\000\000\051\000\000\000\051\000\051\000\051\000\049\000\049\000\
\000\000\052\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\058\000\058\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\000\000\000\000\
\049\000\000\000\052\000\000\000\052\000\052\000\052\000\000\000\
\000\000\059\000\059\000\000\000\058\000\059\000\059\000\059\000\
\059\000\059\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\000\000\049\000\049\000\049\000\000\000\000\000\
\000\000\000\000\000\000\059\000\000\000\058\000\000\000\058\000\
\058\000\058\000\056\000\056\000\000\000\000\000\056\000\056\000\
\056\000\056\000\056\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000\059\000\059\000\
\059\000\057\000\057\000\000\000\056\000\057\000\057\000\057\000\
\057\000\057\000\057\000\061\000\061\000\000\000\000\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\000\000\056\000\000\000\056\000\
\056\000\056\000\060\000\060\000\000\000\061\000\060\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\000\000\057\000\057\000\
\057\000\000\000\000\000\000\000\060\000\000\000\061\000\000\000\
\061\000\061\000\061\000\073\000\073\000\000\000\000\000\073\000\
\073\000\073\000\073\000\073\000\073\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\000\000\060\000\
\060\000\060\000\067\000\068\000\000\000\073\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\081\000\082\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\073\000\000\000\
\073\000\073\000\073\000\067\000\068\000\000\000\000\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\081\000\082\000\083\000\
\139\000\067\000\068\000\000\000\000\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\000\000\000\000\081\000\082\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\068\000\
\000\000\145\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\081\000\082\000\083\000\067\000\068\000\000\000\130\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\081\000\082\000\083\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\068\000\000\000\131\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\081\000\082\000\083\000\000\000\095\000\067\000\
\068\000\000\000\000\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\000\000\
\000\000\081\000\082\000\083\000\000\000\000\000\000\000\000\000\
\000\000\089\000\000\000\160\000\067\000\068\000\000\000\000\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\081\000\082\000\
\083\000\000\000\000\000\067\000\068\000\000\000\091\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\081\000\082\000\083\000\
\000\000\000\000\067\000\068\000\000\000\158\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\000\000\000\000\081\000\082\000\083\000\068\000\
\000\000\000\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\000\000\000\000\
\081\000\082\000\083\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\000\000\
\000\000\081\000\082\000\083\000"

let yycheck = "\004\000\
\000\000\006\000\005\000\032\000\007\000\008\000\001\001\010\000\
\011\000\012\000\028\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\001\000\006\001\053\001\001\001\031\000\032\000\057\001\052\001\
\052\001\089\000\011\001\091\000\002\001\003\001\056\001\056\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\056\001\058\000\020\001\021\001\
\022\001\052\001\061\000\062\000\063\000\072\001\065\000\002\001\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\052\001\028\001\
\054\001\137\000\085\000\072\001\028\001\059\001\054\001\090\000\
\053\001\028\001\056\001\147\000\057\001\002\001\003\001\033\001\
\053\001\065\001\053\001\011\001\105\000\104\000\158\000\159\000\
\053\001\053\001\055\001\056\001\057\001\053\001\139\000\055\001\
\056\001\057\001\053\001\057\001\055\001\056\001\057\001\028\001\
\054\001\014\001\015\001\016\001\017\001\001\001\129\000\020\001\
\021\001\022\001\004\001\065\001\006\001\136\000\052\001\001\001\
\139\000\065\001\141\000\013\001\143\000\065\001\053\001\148\000\
\053\001\019\001\055\001\056\001\057\001\023\001\057\001\025\001\
\026\001\027\001\017\001\029\001\030\001\020\001\021\001\022\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\024\001\028\001\056\001\065\001\056\001\
\053\001\053\001\053\001\061\001\024\001\053\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\002\001\
\003\001\028\001\024\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\004\000\
\163\000\020\001\021\001\022\001\255\255\255\255\255\255\002\001\
\003\001\028\001\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\053\001\255\255\055\001\056\001\057\001\255\255\
\255\255\255\255\255\255\255\255\004\001\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\053\001\019\001\055\001\056\001\057\001\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\004\001\255\255\006\001\012\001\013\001\014\001\015\001\
\016\001\017\001\013\001\255\255\020\001\021\001\022\001\255\255\
\019\001\255\255\255\255\255\255\023\001\024\001\025\001\255\255\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\071\001\072\001\004\001\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\255\255\255\255\255\255\255\255\255\255\019\001\255\255\255\255\
\255\255\023\001\024\001\025\001\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\004\001\255\255\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\023\001\024\001\
\025\001\255\255\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\255\255\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\004\001\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\023\001\024\001\025\001\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\004\001\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\255\255\255\255\
\023\001\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\255\255\064\001\065\001\066\001\067\001\068\001\069\001\070\001\
\071\001\072\001\004\001\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\255\255\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\035\001\036\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\053\001\255\255\
\055\001\056\001\057\001\255\255\255\255\255\255\002\001\003\001\
\255\255\028\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\028\001\255\255\053\001\255\255\055\001\056\001\057\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\255\255\255\255\
\255\255\053\001\255\255\055\001\056\001\057\001\002\001\003\001\
\255\255\028\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\028\001\255\255\053\001\255\255\055\001\056\001\057\001\255\255\
\255\255\002\001\003\001\255\255\028\001\006\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\056\001\057\001\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\053\001\255\255\055\001\
\056\001\057\001\002\001\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\255\255\055\001\056\001\
\057\001\002\001\003\001\255\255\028\001\006\001\007\001\008\001\
\009\001\010\001\011\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\028\001\255\255\053\001\255\255\055\001\
\056\001\057\001\002\001\003\001\255\255\028\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\255\255\055\001\056\001\
\057\001\255\255\255\255\255\255\028\001\255\255\053\001\255\255\
\055\001\056\001\057\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\056\001\057\001\002\001\003\001\255\255\028\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\255\255\
\055\001\056\001\057\001\002\001\003\001\255\255\255\255\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\056\001\002\001\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\003\001\
\255\255\056\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\020\001\021\001\022\001\002\001\003\001\255\255\055\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\003\001\255\255\055\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\020\001\021\001\022\001\255\255\053\001\002\001\
\003\001\255\255\255\255\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\255\255\028\001\255\255\053\001\002\001\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\020\001\021\001\
\022\001\255\255\255\255\002\001\003\001\255\255\028\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\255\255\002\001\003\001\255\255\028\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\022\001\003\001\
\255\255\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\020\001\021\001\022\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001"

let yynames_const = "\
  ASSIGN\000\
  OR\000\
  AND\000\
  NOT\000\
  NEG\000\
  LT\000\
  LEQ\000\
  EQ\000\
  NEQ\000\
  GEQ\000\
  GT\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MODULO\000\
  EXPONENTIAL\000\
  STRCAT\000\
  COMPLEMENT\000\
  TRANSCRIBE\000\
  TRANSLATE\000\
  TRANSLATETWO\000\
  BEGIN\000\
  END\000\
  IF\000\
  ELSEIF\000\
  ELSE\000\
  THEN\000\
  FOR\000\
  WHILE\000\
  CONTINUE\000\
  BREAK\000\
  SIZEOF\000\
  FREAD\000\
  READ\000\
  CAST\000\
  NUC\000\
  INT\000\
  DOUBLE\000\
  AA\000\
  BOOL\000\
  CHAR\000\
  VOID\000\
  STRING\000\
  DNA\000\
  RNA\000\
  CODON\000\
  SEQUENCE\000\
  PEPTIDE\000\
  TRUE\000\
  FALSE\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  SEMI\000\
  COMMA\000\
  COLON\000\
  PERIOD\000\
  INCLUDE\000\
  RETURN\000\
  EOF\000\
  LOCAL\000\
  VARIABLE\000\
  "

let yynames_block = "\
  INT_LIT\000\
  ID\000\
  SEQUENCE_LIT\000\
  CHAR_LIT\000\
  DNA_LIT\000\
  RNA_LIT\000\
  PEP_LIT\000\
  DOUBLE_LIT\000\
  STRING_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 51 "src/parser.mly"
                   (_1)
# 679 "src/parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "src/parser.mly"
        ({pstmts = []; funcs = [];})
# 685 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 54 "src/parser.mly"
                   ({pstmts = _1.pstmts @ [_2] ; funcs = _1.funcs;})
# 693 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_decl) in
    Obj.repr(
# 56 "src/parser.mly"
                        ({pstmts = _1.pstmts; funcs = _1.funcs @ [_2] })
# 701 "src/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 60 "src/parser.mly"
    ({ typ = _1; fname = _2; formals = _4; stmts = List.rev _6;})
# 711 "src/parser.ml"
               : 'func_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "src/parser.mly"
                  ([])
# 717 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 64 "src/parser.mly"
                    ( List.rev _1 )
# 724 "src/parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "src/parser.mly"
            ([(_1, _2)])
# 732 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "src/parser.mly"
                              ( (_3, _4) :: _1 )
# 741 "src/parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "src/parser.mly"
                (Int)
# 747 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "src/parser.mly"
                (Bool)
# 753 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "src/parser.mly"
                (Void)
# 759 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "src/parser.mly"
                (Char)
# 765 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "src/parser.mly"
                (Double)
# 771 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "src/parser.mly"
                (Aa)
# 777 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "src/parser.mly"
                (Nuc)
# 783 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "src/parser.mly"
                (Codon)
# 789 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "src/parser.mly"
                 (Seq)
# 795 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "src/parser.mly"
                (DNA)
# 801 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "src/parser.mly"
                (RNA)
# 807 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "src/parser.mly"
                (Pep)
# 813 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "src/parser.mly"
                (Str)
# 819 "src/parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "src/parser.mly"
                    ([])
# 825 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "src/parser.mly"
                       ( _2 :: _1 )
# 833 "src/parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "src/parser.mly"
                    ( Expr _1 )
# 840 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 93 "src/parser.mly"
                                (Return _2 )
# 847 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 94 "src/parser.mly"
                              (Block(List.rev _2))
# 854 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'expr_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 95 "src/parser.mly"
                                                                ( For(_2, _4, _6, Block(List.rev _8)) )
# 864 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 96 "src/parser.mly"
                                       ( While(_2, Block(List.rev _4)) )
# 872 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'bstmt) in
    Obj.repr(
# 97 "src/parser.mly"
                                        ( If(_2, Block(List.rev _4), _5) )
# 881 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "src/parser.mly"
                                   ( VDecl(_1, _2, _4))
# 890 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 99 "src/parser.mly"
                                       ( ArrayDecl(_1,_3, _5))
# 899 "src/parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "src/parser.mly"
                        (Nobranching)
# 905 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'bstmt) in
    Obj.repr(
# 103 "src/parser.mly"
                                         ( Elseif(_2, Block(List.rev _4), _5) )
# 914 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 104 "src/parser.mly"
                         ( Else(Block(List.rev _2)))
# 921 "src/parser.ml"
               : 'bstmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "src/parser.mly"
                ( Litbool(true) )
# 927 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "src/parser.mly"
                ( Litbool(false) )
# 933 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "src/parser.mly"
                ( Id(_1) )
# 940 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 110 "src/parser.mly"
                (Litint(_1))
# 947 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 111 "src/parser.mly"
                    ( Litdouble(_1) )
# 954 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "src/parser.mly"
                      ( Sequence(_1) )
# 961 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 113 "src/parser.mly"
                              (ArrayAcc(_1, _3))
# 969 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "src/parser.mly"
                 ( Litdna(_1) )
# 976 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "src/parser.mly"
                 ( Litrna(_1) )
# 983 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "src/parser.mly"
                 ( Litpep(_1) )
# 990 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 117 "src/parser.mly"
                    ( Litchar(_1) )
# 997 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "src/parser.mly"
                      ( Stringlit(_1))
# 1004 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "src/parser.mly"
                        (Binop(_1,Add,_3))
# 1012 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "src/parser.mly"
                        (Binop(_1,Sub,_3))
# 1020 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "src/parser.mly"
                        (Binop(_1,Mult,_3))
# 1028 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "src/parser.mly"
                        (Binop(_1,Div,_3))
# 1036 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "src/parser.mly"
                        (Binop(_1,Mod,_3))
# 1044 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "src/parser.mly"
                              (Binop(_3,Expon,_1))
# 1052 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "src/parser.mly"
                      (Binop(_1,And,_3))
# 1060 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "src/parser.mly"
                    (Binop(_1,Or,_3))
# 1068 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "src/parser.mly"
                      (Binop(_1,Equal,_3))
# 1076 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "src/parser.mly"
                      (Binop(_1,Neq,_3))
# 1084 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "src/parser.mly"
                     (Binop(_1,Less,_3))
# 1092 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "src/parser.mly"
                     (Binop(_1,Leq,_3))
# 1100 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "src/parser.mly"
                     (Binop(_1,Greater,_3))
# 1108 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "src/parser.mly"
                     (Binop(_1,Geq,_3))
# 1116 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "src/parser.mly"
                             (Lunop(Neg, _2))
# 1123 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "src/parser.mly"
                 (Lunop(Not, _2))
# 1130 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "src/parser.mly"
                        (Lunop(Comp, _2))
# 1137 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 136 "src/parser.mly"
                        (Runop(_1, Transcb))
# 1144 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 137 "src/parser.mly"
                        (Runop(_1, Translt))
# 1151 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "src/parser.mly"
                            (Runop(_1, Translttwo))
# 1158 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "src/parser.mly"
                        (Assign(_1, _3))
# 1166 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "src/parser.mly"
                                          (ArrayAssign(_1,_3,_6))
# 1175 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 141 "src/parser.mly"
                            (_2)
# 1182 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 142 "src/parser.mly"
                                        (Call(_1, _3))
# 1190 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 143 "src/parser.mly"
                         (SizeOf(_1))
# 1197 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "src/parser.mly"
                       (Typecast(_2, _4))
# 1205 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 145 "src/parser.mly"
                                       (Fread(_3))
# 1212 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 146 "src/parser.mly"
                                      (Read(_3))
# 1219 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 147 "src/parser.mly"
                                          (Cast(_3, _6))
# 1227 "src/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "src/parser.mly"
                        (Noexpr)
# 1233 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "src/parser.mly"
                ( _1 )
# 1240 "src/parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "src/parser.mly"
                      ( [] )
# 1246 "src/parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 155 "src/parser.mly"
                     ( List.rev _1 )
# 1253 "src/parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "src/parser.mly"
             ( [_1] )
# 1260 "src/parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "src/parser.mly"
                                ( _3 :: _1 )
# 1268 "src/parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
